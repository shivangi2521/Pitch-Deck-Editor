"""
Django settings for ppt project.

Generated by 'django-admin startproject' using Django 5.0.6.
"""

import os
from pathlib import Path

# Base directory of the project
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret 
SECRET_KEY = "django-insecure-2y5=*s1u_m3)0!np4$=5jo)*ancygs#k#(5y_ac8b(fjz)ncv6"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True  # Set to False in production for security reasons

# List of allowed hosts for this Django application
ALLOWED_HOSTS = ["*"]  # Allows all hosts for development

# Whitenoise storage settings to serve compressed static files in production
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Application definition: List of installed apps that are part of this Django project
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",  # Static files (CSS, JavaScript, Images) handling
    "rest_framework",  # Django Rest Framework for building APIs
    "corsheaders",  # CORS support
    "slides",  # Custom app
]

# Middleware definition: A list of middleware components that are applied to requests
MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",  # Should be at the top to handle CORS requests
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # To serve static files in production
]

# CORS (Cross-Origin Resource Sharing) configuration for allowing requests from certain domains
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
    "http://localhost:5174",
    "http://localhost:3000",
    "http://localhost:3039",
    # Add any other frontend URLs you need
]

# Methods allowed for CORS requests
CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]

# Custom headers allowed for CORS requests
CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]

# Whether to allow cookies (such as for authentication) to be sent with CORS requests
CORS_ALLOW_CREDENTIALS = True

# Root URL configuration: Points to the module that contains URL routing
ROOT_URLCONF = "ppt.urls"

# Template configuration: Settings for template rendering
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# WSGI application: Specifies the application callable to run the project
WSGI_APPLICATION = "ppt.wsgi.application"

# Database configuration: Uses SQLite for development by default
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# Password validation settings: A set of validators for enforcing password policies
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization settings
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# Static files settings
STATIC_URL = "/static/"  # URL for static files
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static")
]  # Additional directories to search for static files
STATIC_ROOT = os.path.join(
    BASE_DIR, "staticfiles"
)  # Directory for collected static files in production

# Media files settings: For handling uploaded files like images
MEDIA_URL = "/media/"  # URL for media files
MEDIA_ROOT = os.path.join(BASE_DIR, "media")  # Directory for storing media files

# Default auto field type for primary keys in models
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Django Rest Framework settings
REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.AllowAny",
    ],
    "DEFAULT_PARSER_CLASSES": [
        "rest_framework.parsers.JSONParser",  # JSON parser for incoming request data
        "rest_framework.parsers.FormParser",  # Form data parser
        "rest_framework.parsers.MultiPartParser",  # Multipart form data parser for file uploads
    ],
}
